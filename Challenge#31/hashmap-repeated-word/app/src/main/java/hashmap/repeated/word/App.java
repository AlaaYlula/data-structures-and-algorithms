/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashmap.repeated.word;

import java.util.HashMap;
import java.util.Locale;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        String string = "Once upon a time, there was a brave princess who...";
        String string2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...";
        String string3 = "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York...";

        System.out.println("The String : => "+string);
        System.out.println("The first word to occur more than once in a string => "+repeatedWord(string));
        System.out.println("A count of each of the words in the provided string : ");
        System.out.println(wordCount(string));
        System.out.println("////////////////////");
        System.out.println("The String : => "+string2);
        System.out.println("The first word to occur more than once in a string => "+repeatedWord(string2));
        System.out.println("A count of each of the words in the provided string : ");
        System.out.println(wordCount(string2));
        System.out.println("////////////////////");
        System.out.println("The String : => "+string3);
        System.out.println("The first word to occur more than once in a string => "+repeatedWord(string3));
        System.out.println("A count of each of the words in the provided string : ");
        System.out.println(wordCount(string3));

        //System.out.println(repeatedWord("alaa alaa..."));

    }

    public static String repeatedWord(String str){
        if(str.length() ==0){
            return "String is Empty";
        }
        HashMap<String,Integer> hashMap = new HashMap<>();
        String[] words = str.split(" ");
        for (int i = 0; i < words.length; i++) {
            String word = words[i].toLowerCase(Locale.ROOT);
            word = wordCheck(word);
            if(!hashMap.containsKey(word)){
                hashMap.put(word,1);
            }
            else{
                return word;
            }
        }
        return "Not has duplicate";
    }
    public static String wordCheck(String word){
        String [] specialChar={",","?","!","."};
        for (int i = 0; i < specialChar.length ; i++) {
            if (word.contains(specialChar[i])) {
                word = word.substring(0, word.length() - 1);
            }
            if (word.contains("...")) {
                word = word.substring(0, word.length() - 3);
            }
        }
            return word;
    }

    public static HashMap<String,Integer> wordCount(String str){
        HashMap<String,Integer> hashMap = new HashMap<>();
        String[] words = str.split(" ");
        for (int i = 0; i < words.length; i++) {
            String word = words[i].toLowerCase(Locale.ROOT);
            word = wordCheck(word);
            if(!hashMap.containsKey(word)){
                hashMap.put(word,1);
            }
            else{
                hashMap.put(word,hashMap.get(word)+1);
            }
        }
        return hashMap;
    }
}
