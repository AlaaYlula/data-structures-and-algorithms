/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package animal.shelter;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    animalSelter animalSelter = new animalSelter();

    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void TestAddCat(){
        Cat cat = new Cat("cat1");
        Cat cat2 = new Cat("cat2");

        animalSelter.enqueue(cat);
        animalSelter.enqueue(cat2);

        assertTrue(!animalSelter.getCatQueue().isEmpty());
        assertTrue(animalSelter.getCatQueue().peek().equals(cat));
    }
    @Test void  TestAddDog(){
        Dog dog = new Dog("dog1");
        Dog dog2 = new Dog("dog2");

        animalSelter.enqueue(dog);
        animalSelter.enqueue(dog2);

        assertTrue(!animalSelter.getCatQueue().isEmpty());
        assertTrue(animalSelter.getCatQueue().peek().equals(dog));
    }
    @Test void TestRemoveCat(){
        Cat cat = new Cat("cat1");
        Cat cat2 = new Cat("cat2");

        animalSelter.enqueue(cat);
        animalSelter.enqueue(cat2);
        animalSelter.dequeue("cat");
        assertTrue(animalSelter.getCatQueue().peek().equals(cat2));
    }
    @Test void TestRemoveDog(){
        Dog dog = new Dog("dog1");
        Dog dog2 = new Dog("dog2");

        animalSelter.enqueue(dog);
        animalSelter.enqueue(dog2);
        animalSelter.dequeue("dog");
        assertTrue(animalSelter.getDogQueue().peek().equals(dog2));
    }
    @Test void TestAddAnotherAnimal(){
        Cat cat = new Cat("cat1");
        Cat cat2 = new Cat("cat2");
        animalSelter.enqueue(cat);
        animalSelter.enqueue(cat2);
        Dog dog = new Dog("dog1");
        Dog dog2 = new Dog("dog2");
        animalSelter.enqueue(dog);
        animalSelter.enqueue(dog2);
        Bird bird = new Bird("Bird1");
        try {
            animalSelter.enqueue(bird);
            fail("Must throw an exception");
        }catch (IllegalArgumentException e){

        }
    }
    @Test void TestRemoveFromEmpty(){
        try {
            animalSelter.dequeue("cat");
            animalSelter.dequeue("dog");

            fail("Must throw an exception");
        }catch (IllegalArgumentException e){

        }
    }
    @Test void RemoveNotCatDog(){
        assertEquals(null,animalSelter.dequeue("bird"));
    }
}
