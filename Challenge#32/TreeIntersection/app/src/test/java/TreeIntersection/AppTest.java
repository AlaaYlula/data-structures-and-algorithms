/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TreeIntersection;

import TreeIntersection.data.Node;
import TreeIntersection.structure.BinaryTree;
import TreeIntersection.structure.HashTable;
import org.checkerframework.checker.units.qual.A;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static TreeIntersection.App.treeIntersection;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void TestTree(){
        BinaryTree<Integer> binaryTree = new BinaryTree<>();
        //Root
        binaryTree.setRoot(new Node<Integer>(150));
        //level 1
        binaryTree.getRoot().setLeftNode(new  Node<Integer >(100));
        binaryTree.getRoot().setRightNode(new  Node<Integer >(250));
        //level 2
        binaryTree.getRoot().getLeftNode().setLeftNode(new Node<Integer>(75));
        binaryTree.getRoot().getLeftNode().setRightNode(new Node<Integer>(160));

        binaryTree.getRoot().getLeftNode().getRightNode().setLeftNode(new Node<Integer>(125));
        binaryTree.getRoot().getLeftNode().getRightNode().setRightNode(new Node<Integer>(175));

        binaryTree.getRoot().getRightNode().setLeftNode(new Node<Integer>(200));
        binaryTree.getRoot().getRightNode().setRightNode(new Node<Integer>(350));

        binaryTree.getRoot().getRightNode().getRightNode().setLeftNode(new Node<Integer>(300));
        binaryTree.getRoot().getRightNode().getRightNode().setRightNode(new Node<Integer>(500));

        BinaryTree<Integer> binaryTree2 = new BinaryTree<>();
        //Root
        binaryTree2.setRoot(new Node<Integer>(42));
        //level 1
        binaryTree2.getRoot().setLeftNode(new  Node<Integer >(100));
        binaryTree2.getRoot().setRightNode(new  Node<Integer >(600));
        //level 2
        binaryTree2.getRoot().getLeftNode().setLeftNode(new Node<Integer>(15));
        binaryTree2.getRoot().getLeftNode().setRightNode(new Node<Integer>(160));

        binaryTree2.getRoot().getLeftNode().getRightNode().setLeftNode(new Node<Integer>(125));
        binaryTree2.getRoot().getLeftNode().getRightNode().setRightNode(new Node<Integer>(175));

        binaryTree2.getRoot().getRightNode().setLeftNode(new Node<Integer>(200));
        binaryTree2.getRoot().getRightNode().setRightNode(new Node<Integer>(350));

        binaryTree2.getRoot().getRightNode().getRightNode().setLeftNode(new Node<Integer>(4));
        binaryTree2.getRoot().getRightNode().getRightNode().setRightNode(new Node<Integer>(500));

        ArrayList<Integer> arrayResult = treeIntersection(binaryTree,binaryTree2);
        ArrayList<Integer> arrayExpected = new ArrayList<>();
        arrayExpected.add(100);
        arrayExpected.add(160);
        arrayExpected.add(200);
        arrayExpected.add(500);
        arrayExpected.add(125);
        arrayExpected.add(350);
        arrayExpected.add(175);

        assertArrayEquals(arrayExpected.toArray(),arrayResult.toArray());

    }
}
