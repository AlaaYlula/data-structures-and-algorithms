/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TreeIntersection;

import TreeIntersection.data.Node;
import TreeIntersection.structure.BinaryTree;
import TreeIntersection.structure.HashTable;

import java.util.ArrayList;


public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        BinaryTree<Integer> binaryTree = new BinaryTree<>();
        //Root
        binaryTree.setRoot(new Node<Integer>(150));
        //level 1
        binaryTree.getRoot().setLeftNode(new  Node<Integer >(100));
        binaryTree.getRoot().setRightNode(new  Node<Integer >(250));
        //level 2
        binaryTree.getRoot().getLeftNode().setLeftNode(new Node<Integer>(75));
        binaryTree.getRoot().getLeftNode().setRightNode(new Node<Integer>(160));

        binaryTree.getRoot().getLeftNode().getRightNode().setLeftNode(new Node<Integer>(125));
        binaryTree.getRoot().getLeftNode().getRightNode().setRightNode(new Node<Integer>(175));

        binaryTree.getRoot().getRightNode().setLeftNode(new Node<Integer>(200));
        binaryTree.getRoot().getRightNode().setRightNode(new Node<Integer>(350));

        binaryTree.getRoot().getRightNode().getRightNode().setLeftNode(new Node<Integer>(300));
        binaryTree.getRoot().getRightNode().getRightNode().setRightNode(new Node<Integer>(500));

        BinaryTree<Integer> binaryTree2 = new BinaryTree<>();
        //Root
        binaryTree2.setRoot(new Node<Integer>(42));
        //level 1
        binaryTree2.getRoot().setLeftNode(new  Node<Integer >(100));
        binaryTree2.getRoot().setRightNode(new  Node<Integer >(600));
        //level 2
        binaryTree2.getRoot().getLeftNode().setLeftNode(new Node<Integer>(15));
        binaryTree2.getRoot().getLeftNode().setRightNode(new Node<Integer>(160));

        binaryTree2.getRoot().getLeftNode().getRightNode().setLeftNode(new Node<Integer>(125));
        binaryTree2.getRoot().getLeftNode().getRightNode().setRightNode(new Node<Integer>(175));

        binaryTree2.getRoot().getRightNode().setLeftNode(new Node<Integer>(200));
        binaryTree2.getRoot().getRightNode().setRightNode(new Node<Integer>(350));

        binaryTree2.getRoot().getRightNode().getRightNode().setLeftNode(new Node<Integer>(4));
        binaryTree2.getRoot().getRightNode().getRightNode().setRightNode(new Node<Integer>(500));

        System.out.println("In Order Array1 => "+binaryTree.InOrder());
        System.out.println("In Order Array2 => "+binaryTree2.InOrder());
        System.out.println(treeIntersection(binaryTree,binaryTree2));
    }

    public static ArrayList<Integer> treeIntersection(BinaryTree<Integer> binaryTree1 ,
                                                      BinaryTree<Integer> binaryTree2){
       // To store Tree 1 Element
        HashTable<Integer,Integer> hashTable1 = new HashTable<>();
        // To store the common elements
        HashTable<Integer,Integer> hashTable2 = new HashTable<>();

        // has the tree 1 elements
        hashTable1 = treeIntersection(binaryTree1.getRoot(),hashTable1,hashTable2,1 );
        hashTable2 = treeIntersection(binaryTree2.getRoot(),hashTable1,hashTable2,2);

        return hashTable2.keys();
    }
    public static HashTable<Integer,Integer> treeIntersection(Node<Integer> node ,  HashTable<Integer,Integer> hashTable,
                                                              HashTable<Integer,Integer> hashTable2  ,int i ) {
        if(node == null)
            if(i==1){
                return hashTable;
            }else {
                return hashTable2;
            }
        if( i == 1) { // this is Tree 1
            hashTable.set(node.getData(), node.getData());

            if (node.getLeftNode() != null) {
                hashTable = treeIntersection(node.getLeftNode(), hashTable,hashTable2,1);
            }
            if (node.getRightNode() != null) {
                hashTable = treeIntersection(node.getRightNode(), hashTable , hashTable2,1);
            }
            return hashTable;
        }
        else{ // This is Tree 2
            if(hashTable.contains(node.getData())){
                hashTable2.set(node.getData(), node.getData());
            }
            if (node.getLeftNode() != null) {
                hashTable2 = treeIntersection(node.getLeftNode(), hashTable,hashTable2,2);
            }
            if (node.getRightNode() != null) {
                hashTable2 = treeIntersection(node.getRightNode(), hashTable , hashTable2,2);
            }
            return hashTable2;
        }
    }
    /*
     public static HashTable<Integer,Integer> treeIntersection(BinaryTree<Integer> binaryTree1 , BinaryTree<Integer> binaryTree2){
        HashTable<Integer,Integer> hashTable1 = new HashTable<>();
        HashTable<Integer,Integer> hashTable2 = new HashTable<>();
        HashTable<Integer,Integer> hashTableResult = new HashTable<>();

        hashTable1 = treeIntersection(binaryTree1.getRoot(),hashTable1);
        hashTable2 = treeIntersection(binaryTree2.getRoot(),hashTable2);

        for (Integer key:
             hashTable1.keys()) {
            if(hashTable2.contains(key)){
                hashTableResult.set(key,key);
            }
        }
        return hashTableResult;
    }
    public static HashTable<Integer,Integer> treeIntersection(Node<Integer> node ,  HashTable<Integer,Integer> hashTable ) {
        if(node == null)
            return hashTable;

        hashTable.set(node.getData(), node.getData());

        if (node.getLeftNode() != null) {
                hashTable = treeIntersection(node.getLeftNode(), hashTable);
            }
        if (node.getRightNode() != null) {
            hashTable = treeIntersection(node.getRightNode(), hashTable);
        }

    return hashTable;
    }
     */
}
