/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package validate_brackets;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void TestEmptyString(){
       try{
           validate_brackets("");
           fail("Must throw Exception");
       }catch (IllegalArgumentException e){

       }
    }
    @Test void TestOpenbracketWithoutClose(){
        assertFalse(validate_brackets("(()"));
    }
    @Test void TestCloseWithoutOpen(){
        assertFalse(validate_brackets("(){}}"));
    }
    @Test void TestValidateTrue(){
        assertTrue(validate_brackets("(){}[({Alaa})]"));
    }

    public static Boolean validate_brackets(String string) {
        if (string.length() == 0){
            throw new IllegalArgumentException();
        }
        Stack<Character> stack_open = new Stack<>();
        for (int i = 0; i < string.length(); i++) {
            if (string.charAt(i) == '{' || string.charAt(i) == '(' || string.charAt(i) == '[') {
                stack_open.push(string.charAt(i));
            }else{
                // It works string = "()}" // It is close bracket but it doesn't have open bracket
                if(stack_open.isEmpty()){
                    return false;
                }
                if(string.charAt(i) !='}' && string.charAt(i)!=')' && string.charAt(i)!=']'  ){
                    continue;
                }else {
                    if (string.charAt(i) == '}' && stack_open.peek() != '{')
                        return false;
                    if (string.charAt(i) == ')' && stack_open.peek() != '(')
                        return false;
                    if (string.charAt(i) == ']' && stack_open.peek() != '[')
                        return false;

                    stack_open.pop(); // if the open bracket has the close bracket
                }
            }
        }
        // if the stack still not empty that means open bracket doesn't have close bracket
        if(!stack_open.isEmpty()){
            return false;
        }
        return true;
    }
}
