/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import graph.data.Vertex;
import graph.structure.Graph;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
//    Node can be successfully added to the graph
    @Test void addNode(){
        Graph<String> graph = new Graph<>();
        Vertex<String> node = graph.addNode("A");
        Vertex<String> nodeExpected = new Vertex<>("A");

        List<Vertex<String>>  neighborsA = graph.getNeighbors(new Vertex<>("A"));
        List<Vertex<String>> expected = new ArrayList<>();

        assertEquals(List.of(expected), List.of(neighborsA));
        assertEquals(nodeExpected,node);
    }
//    An edge can be successfully added to the graph
    @Test void addEdge(){
        Graph<String> graph = new Graph<>();
        graph.addNode("A");
        graph.addNode("B");
        graph.addEdge(new Vertex<>("A"),new Vertex<>("B"),1);

        List<Vertex<String>>  neighborsA = graph.getNeighbors(new Vertex<>("A"));
        List<Vertex<String>> expected = new ArrayList<>();
        expected.add(new Vertex<>("B"));

        assertEquals(List.of(expected), List.of(neighborsA));
    }
//    A collection of all nodes can be properly retrieved from the graph
    @Test void getNodes(){
        Graph<String> graph = new Graph<>();
        graph.addNode("A");
        graph.addNode("B");

        Set<Vertex<String>> nodes = graph.getNodes();
        Set<Vertex<String>> expected = new HashSet<>() ;

        expected.add(new Vertex<>("A"));
        expected.add(new Vertex<>("B"));

        assertEquals(List.of(expected), List.of(nodes));
    }
//    All appropriate neighbors can be retrieved from the graph
    @Test void getNeighbors(){
        Graph<String> graph = new Graph<>();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addEdge(new Vertex<>("A"),new Vertex<>("B"),2);
        graph.addEdge(new Vertex<>("A"),new Vertex<>("C"),3);

        List<Vertex<String>>  neighborsA = graph.getNeighbors(new Vertex<>("A"));
        List<Vertex<String>> expected = new ArrayList<>();
        expected.add(new Vertex<>("B"));
        expected.add(new Vertex<>("C"));

        assertEquals(List.of(expected), List.of(neighborsA));
    }
//    Neighbors are returned with the weight between nodes included //////////////// Not yet
    @Test void weight(){

    }
//    The proper size is returned, representing the number of nodes in the graph
    @Test void getSize(){
        Graph<String> graph = new Graph<>();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        int size = graph.size();

        assertEquals(3,size);
    }
//    A graph with only one node and edge can be properly returned   //////////////// Not yet
    @Test void getOneNode(){
        Graph<String> graph = new Graph<>();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        int size = graph.size();

        assertEquals(3,size);
    }
//    An empty graph properly returns null
    @Test void getEmptyGraph(){
        Graph<String> graph = new Graph<>();

        assertEquals(null,graph.getNodes());
    }
}
