/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StackQueue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    Stack<Integer> stack = new Stack<>();
    Queue<Integer> queue = new Queue<>();
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
//    Can successfully push onto a stack
    @Test void  TestPush(){
        stack.push(1);
        assertTrue(stack.getTop().getValue().equals(1));
    }
//    Can successfully push multiple values onto a stack
    @Test void TestMultiPush(){
        stack.push(2);
        stack.push(3);
        assertTrue(stack.getTop().getValue().equals(3));
    }
//    Can successfully pop off the stack
    @Test void Testpop() {
        stack.push(1);
        stack.push(2);
        stack.push(3);
        Integer result = stack.pop();
        assertTrue(stack.getTop().getValue().equals(2));
        assertTrue(result.equals(3));
    }
//    Can successfully empty a stack after multiple pops
    @Test void Testremove(){
        stack.push(1);
        stack.push(2);
        Integer result = stack.pop();
        Integer result2 = stack.pop();
        assertTrue(stack.isEmpty());
    }
//    Can successfully peek the next item on the stack
    @Test void Testpeek(){
        stack.push(1);
        stack.push(2);
        assertTrue(stack.peek().equals(2));
    }
//    Can successfully instantiate an empty stack
    @Test void TestEmpty(){
        assertTrue(stack.isEmpty());
    }
//    Calling pop or peek on empty stack raises exception

     @Test void TestExceptions(){
         try {
             Integer res1 = stack.pop();
             Integer res2 = stack.peek();
             fail( "My method didn't throw when I expected it to" );
         } catch (IllegalArgumentException expectedException) {
         }
     }
//    Can successfully enqueue into a queue
      @Test void Testenqueue(){
          queue.enqueue(3);
        assertTrue(queue.getBack().getValue().equals(3));
      }
//    Can successfully enqueue multiple values into a queue
    @Test void TestMultienqueue(){
        queue.enqueue(3);
        queue.enqueue(2);

        assertTrue(queue.getBack().getValue().equals(2));
    }
//    Can successfully dequeue out of a queue the expected value
    @Test void Testdequeue(){
        queue.enqueue(1);// front
        queue.enqueue(2);
        queue.enqueue(3);//back
        Integer value = queue.dequeue();
        assertTrue(queue.getFront().getValue().equals(2));
        assertTrue(value.equals(1));
    }
//    Can successfully peek into a queue, seeing the expected value
    @Test void TestQueuepeek(){
        queue.enqueue(1);// front
        queue.enqueue(2);
        queue.enqueue(3);//back
        assertTrue(queue.getFront().getValue().equals(1));

    }
//    Can successfully empty a queue after multiple dequeues
    @Test void TestEmptyQueue(){
        queue.enqueue(1);// front
        queue.enqueue(2);
        queue.enqueue(3);//back
        Integer value = queue.dequeue();
        Integer value2 = queue.dequeue();
        Integer value3 = queue.dequeue();

        assertTrue(queue.isEmpty());
    }
//    Can successfully instantiate an empty queue
    @Test void TestEmptyQ(){
        assertTrue(queue.isEmpty());
    }
//    Calling dequeue or peek on empty queue raises exception
@Test void TestExceptionsQueue(){
    try {
        Integer res1 = queue.dequeue();
        Integer res2 = queue.peek();
        fail( "My method didn't throw when I expected it to" );
    } catch (IllegalArgumentException expectedException) {
    }
}
}
