/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package breadth_first;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void EmptyTree(){
        BinaryTree binaryTree = new BinaryTree();
        BinarySearchTree binarySearchTree = new BinarySearchTree();
        assertTrue(binaryTree.breadthFirst()==null);
        assertTrue(binarySearchTree.breadthFirst()==null);
    }
    @Test void BinaryTree(){
        BinaryTree binaryTree = new BinaryTree();

        binaryTree.setRoot(new Node(2));
        //level 1
        binaryTree.getRoot().setLeftNode(new Node(7));
        binaryTree.getRoot().setRightNode(new Node(5));
        //level 2
        binaryTree.getRoot().getLeftNode().setLeftNode(new Node(2));
        binaryTree.getRoot().getLeftNode().setRightNode(new Node(6));
        binaryTree.getRoot().getRightNode().setRightNode(new Node(9));
        //level 3
        binaryTree.getRoot().getLeftNode().getRightNode().setLeftNode(new Node(5));
        binaryTree.getRoot().getLeftNode().getRightNode().setRightNode(new Node(11));
        binaryTree.getRoot().getRightNode().getRightNode().setLeftNode(new Node(4));

        List<Integer> result = new ArrayList<>();
        result.add(2);
        result.add(7);
        result.add(5);
        result.add(2);
        result.add(6);
        result.add(9);
        result.add(5);
        result.add(11);
        result.add(4);

        assertTrue(binaryTree.breadthFirst().equals(result));
    }
    @Test void BinarySearchTree(){
        BinarySearchTree binarySearchTree = new BinarySearchTree();
        binarySearchTree.add(10);
        binarySearchTree.add(5);
        binarySearchTree.add(2);
        binarySearchTree.add(20);

        List<Integer> result = new ArrayList<>();
        result.add(10);
        result.add(5);
        result.add(20);
        result.add(2);

        assertTrue(binarySearchTree.breadthFirst().equals(result));

    }
}
